[build-system]
requires = ["setuptools>=70.0"]
build-backend = "setuptools.build_meta"

[project]
name = "comfyui_llm_api"
version = "0.0.3"
description = "A ComfyUI extension that provides nodes for interacting with OpenAI-compatible Large Language Model (LLM) APIs, supporting both text-only and multimodal (image+text) prompts"
authors = [
  {name = "Peter Sun", email = "pengrui.sun@outlook.com"}
]
readme = "README.md"
license = {text = "MIT license"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "requests>=2.31.0",  # For making HTTP requests to LLM APIs
    "python-dotenv>=1.0.0",  # For loading API keys from environment variables
    "pydantic>=2.0.0",  # For data validation
]

[project.optional-dependencies]
dev = [
    "bump-my-version",
    "coverage",  # testing
    "mypy",  # linting
    "pre-commit", # runs linting on commit
    "pytest>=7.0",
    "ruff",  # linting
    "responses>=0.23.0",
    "pillow>=10.0.0",
]

[project.urls]
bugs = "https://github.com/perfectspr/comfyui_llm_api/issues"
homepage = "https://github.com/perfectspr/comfyui_llm_api"
Repository = "https://github.com/perfectspr/comfyui_llm_api"


[tool.comfy]
PublisherId = "perfectspr"
DisplayName = "ComfyUI LLM API Nodes"
Icon = ""

[tool.setuptools.package-data]
"*" = ["*.*"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = [
    "tests",
]

[tool.mypy]
files = "."

# Use strict defaults
strict = true
warn_unreachable = true
warn_no_return = true

[[tool.mypy.overrides]]
# Don't require test functions to include types
module = "tests.*"
allow_untyped_defs = true
disable_error_code = "attr-defined"

[tool.ruff]
# extend-exclude = ["static", "ci/templates"]
line-length = 140
src = ["src", "tests"]
target-version = "py39"

# Add rules to ban exec/eval
[tool.ruff.lint]
select = [
    "S102",  # exec-builtin
    "S307",  # eval-used
    "W293",
    "F",  # The "F" series in Ruff stands for "Pyflakes" rules, which catch various Python syntax errors and undefined names.
    # See all rules here: https://docs.astral.sh/ruff/rules/#pyflakes-f
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
